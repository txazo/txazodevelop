Annotation

1. Annotation架构
   Annotation ElementType RetentionPolicy
   Documented Inherited Retention Target
   Deprecated Override SuppressWarnings

2. Annotation: 注解接口
   1) 使用@interface定义注解
   2) 1个Annotation和1 ~ n个ElementType关联
   3) 1个Annotation和1个RetentionPolicy关联

3. ElementType: 注解类型
   public enum ElementType {
       TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, ANNOTATION_TYPE, PACKAGE
   }
   1) TYPE: 类接口枚举声明
   2) FIELD: 字段声明
   3) METHOD: 方法声明
   4) PARAMETER: 参数声明
   5) CONSTRUCTOR: 构造方法声明
   6) LOCAL_VARIABLE: 局部变量声明
   7) ANNOTATION_TYPE: 注释类型声明
   8) PACKAGE: 包声明

4. RetentionPolicy: 注解策略
   public enum RetentionPolicy {
       SOURCE, CLASS, RUNTIME
   }
   1) SOURCE: Annotation存在于编译器处理期间
   2) CLASS: Annotation存储于类的class文件中，Annotation的默认行为
   3) RUNTIME: Annotation存储于类的class文件中，并可由JVM读入

5. Annotation的实现类
   1) Documented: 使用@Documented修饰的Annotation可出现在javadoc中
   2) Inherited: @Inherited注解的Annotation具有继承性
   3) Retention: 指定Annotation的策略RetentionPolicy，默认为RetentionPolicy.CLASS
   4) Target: 指定Annotation的类型ElementType，默认不限
   5) Deprecated: @Deprecated注解的内容，不再被建议使用
   6) Override: @Override只能注解方法，表示覆盖父类方法
   7) SuppressWarnings: 编译器会忽略@SuppressWarnings注解内容中的警告

6. Annotation的用途
   1) 编译检查: @Deprecated @Override @SuppressWarnings
   2) 反射
   3) 生成javadoc: @Documented
   4) 自定义Annotation

7. 自定义Annotation
public enum LoginType {
	LOGIN, GUEST
}

@Documented
@Inherited
@Retention(value = RetentionPolicy.RUNTIME)
@Target(value = { ElementType.METHOD })
public @interface Login {

	LoginType value() default LoginType.LOGIN;

}